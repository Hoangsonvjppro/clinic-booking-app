/*
 * L·ªõp c·∫•u h√¨nh b·∫£o m·∫≠t trung t√¢m cho auth-service. M·ª•c ti√™u c·ªßa l·ªõp n√†y l√† thi·∫øt l·∫≠p chu·ªói filter
 * c·ªßa Spring Security theo h∆∞·ªõng stateless: m·ªçi y√™u c·∫ßu ƒëi v√†o s·∫Ω ƒëi qua b·ªô l·ªçc JWT ƒë·ªÉ tr√≠ch xu·∫•t
 * v√† x√°c th·ª±c token, phi√™n (session) HTTP truy·ªÅn th·ªëng b·ªã v√¥ hi·ªáu h√≥a, v√† ch·ªâ m·ªôt s·ªë endpoint c√¥ng
 * khai (ƒëƒÉng k√Ω/ƒëƒÉng nh·∫≠p, health check) m·ªõi ƒë∆∞·ª£c ph√©p truy c·∫≠p kh√¥ng c·∫ßn x√°c th·ª±c. Ngo√†i ra, l·ªõp
 * c√≤n ƒë·ªãnh nghƒ©a c√°c bean c·∫ßn thi·∫øt nh∆∞ PasswordEncoder, AuthenticationManager, DaoAuthenticationProvider
 * v√† CORS filter ƒë·ªÉ ki·ªÉm so√°t ngu·ªìn g·ªëc (origin) ph√≠a frontend.
 *
 * Tri·∫øt l√Ω ·ªü ƒë√¢y l√† ‚ÄúAPI kh√¥ng tr·∫°ng th√°i‚Äù: m·ªói request t·ª± mang theo b·∫±ng ch·ª©ng (JWT) ƒë·ªÉ ch·ª©ng minh danh t√≠nh.
 * C√°ch ti·∫øp c·∫≠n n√†y gi√∫p d·ªãch v·ª• d·ªÖ m·ªü r·ªông theo chi·ªÅu ngang (scale-out), tr√°nh ph·ª• thu·ªôc v√†o session server-side
 * v√† t·∫°o bi√™n t√°ch r√µ r√†ng gi·ªØa c√°c microservice.
 */
package com.clinic.auth.config;

import com.clinic.auth.security.JwtAuthenticationFilter; // Filter t·ª± vi·∫øt ƒë·ªÉ ƒë·ªçc, ki·ªÉm tra v√† g·∫Øn Authentication t·ª´ JWT
import com.clinic.auth.security.oauth.CustomOAuth2UserService;
import com.clinic.auth.security.oauth.CustomOidcUserService;
import com.clinic.auth.security.oauth.HttpCookieOAuth2AuthorizationRequestRepository;
import com.clinic.auth.security.oauth.OAuth2AuthenticationFailureHandler;
import com.clinic.auth.security.oauth.OAuth2AuthenticationSuccessHandler;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor; // T·ª± sinh constructor cho c√°c field final, ph·ª•c v·ª• DI g·ªçn g√†ng
import org.springframework.context.annotation.Bean; // ƒê√°nh d·∫•u ph∆∞∆°ng th·ª©c tr·∫£ v·ªÅ bean cho Spring IoC
import org.springframework.context.annotation.Configuration; // ƒê√°nh d·∫•u l·ªõp c·∫•u h√¨nh
import org.springframework.http.HttpMethod; // H·∫±ng s·ªë HTTP method (GET/POST/...)
import org.springframework.security.authentication.AuthenticationManager; // ƒêi·ªÉm ƒëi·ªÅu ph·ªëi qu√° tr√¨nh x√°c th·ª±c
import org.springframework.security.authentication.dao.DaoAuthenticationProvider; // Provider x√°c th·ª±c d·ª±a tr√™n UserDetailsService + PasswordEncoder
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration; // Cung c·∫•p AuthenticationManager m·∫∑c ƒë·ªãnh
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity; // B·∫≠t @PreAuthorize/@PostAuthorize ·ªü c·∫•p method
import org.springframework.security.config.annotation.web.builders.HttpSecurity; // API c·∫•u h√¨nh HTTP security
import org.springframework.security.config.http.SessionCreationPolicy; // Ch√≠nh s√°ch t·∫°o session (STATELESS/STATEFUL)
import org.springframework.security.core.userdetails.UserDetailsService; // H·ª£p ƒë·ªìng cung c·∫•p th√¥ng tin ng∆∞·ªùi d√πng
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; // Thu·∫≠t to√°n bƒÉm m·∫≠t kh·∫©u BCrypt
import org.springframework.security.crypto.password.PasswordEncoder; // Abstraction cho c∆° ch·∫ø m√£ h√≥a m·∫≠t kh·∫©u
import org.springframework.security.web.SecurityFilterChain; // ƒê·∫°i di·ªán chu·ªói filter cu·ªëi c√πng
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; // V·ªã tr√≠ chu·∫©n ƒë·ªÉ ch√®n filter JWT tr∆∞·ªõc b∆∞·ªõc x√°c th·ª±c form
import org.springframework.web.cors.CorsConfiguration; // C·∫•u h√¨nh CORS
import org.springframework.web.cors.UrlBasedCorsConfigurationSource; // √Ånh x·∫° ƒë∆∞·ªùng d·∫´n -> c·∫•u h√¨nh CORS
import org.springframework.web.filter.CorsFilter; // Filter th·ª±c thi CORS

import java.util.Arrays; // Ti·ªán √≠ch t·∫°o danh s√°ch ph∆∞∆°ng th·ª©c cho CORS
import java.util.List; // Danh s√°ch origin/header cho CORS

@Configuration // Cho Spring bi·∫øt ƒë√¢y l√† l·ªõp c·∫•u h√¨nh
@EnableMethodSecurity(prePostEnabled = true) // K√≠ch ho·∫°t b·∫£o m·∫≠t ·ªü c·∫•p method (v√≠ d·ª• @PreAuthorize)
@RequiredArgsConstructor // Sinh constructor nh·∫≠n v√†o c√°c field final b√™n d∆∞·ªõi
public class SecurityConfig {

    private final JwtAuthenticationFilter jwtAuthenticationFilter; // B·ªô l·ªçc ƒë·ªçc/ki·ªÉm tra JWT v√† g·∫Øn Authentication v√†o SecurityContext
    private final UserDetailsService userDetailsService; // Ngu·ªìn d·ªØ li·ªáu ng∆∞·ªùi d√πng (t·∫£i b·ªüi username) cho qu√° tr√¨nh x√°c th·ª±c
    private final AppProps appProps; // C·∫•u h√¨nh ·ª©ng d·ª•ng (ngu·ªìn origin CORS, v.v.)

    /**
     * ƒê·ªãnh nghƒ©a chu·ªói filter c·ªßa Spring Security cho ·ª©ng d·ª•ng. C·∫•u h√¨nh n√†y t·∫Øt CSRF v√¨ ta ch·∫°y REST stateless,
     * bu·ªôc ch√≠nh s√°ch phi√™n l√† STATELESS, n·ªõi l·ªèng truy c·∫≠p cho c√°c endpoint c√¥ng khai v√† ch√®n JwtAuthenticationFilter
     * tr∆∞·ªõc UsernamePasswordAuthenticationFilter ƒë·ªÉ ∆∞u ti√™n x√°c th·ª±c b·∫±ng JWT cho m·ªçi request.
     *
     * Pseudocode (r√∫t g·ªçn):
     * <pre>
     *   http.csrf.disable()
     *       .sessionManagement(STATELESS)
     *       .authorizeHttpRequests:
     *           - permit /api/v1/auth/**
     *           - permit GET /actuator/health
     *           - require auth cho m·ªçi request kh√°c
     *       .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter)
     *   return http.build()
     * </pre>
     */
    @Bean // Expose SecurityFilterChain cho Spring s·ª≠ d·ª•ng
    public SecurityFilterChain filterChain(
            HttpSecurity http,
            CustomOAuth2UserService customOAuth2UserService,
            OAuth2AuthenticationSuccessHandler oAuth2AuthenticationSuccessHandler,
            OAuth2AuthenticationFailureHandler oAuth2AuthenticationFailureHandler,
            HttpCookieOAuth2AuthorizationRequestRepository authorizationRequestRepository,
            CustomOidcUserService customOidcUserService
    ) throws Exception {
        http
                // 1Ô∏è‚É£ T·∫Øt CSRF v√¨ REST API l√† stateless
                .csrf(csrf -> csrf.disable())
                // 2Ô∏è‚É£ B·∫£o ƒë·∫£m kh√¥ng t·∫°o session
                .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED))
                // 3Ô∏è‚É£ Quy t·∫Øc ph√¢n quy·ªÅn endpoint
                .authorizeHttpRequests(auth -> auth
                        // C√°c endpoint public (kh√¥ng c·∫ßn token)
                        .requestMatchers(
                                "/api/v1/auth/register",
                                "/api/v1/auth/login",
                                "/api/v1/auth/refresh",
                                "/api/v1/auth/google",
                                "/oauth2/authorization/**",
                                "/login/oauth2/**"
                        ).permitAll()
                        .requestMatchers(HttpMethod.GET, "/actuator/health").permitAll()
                        // M·ªçi request kh√°c ƒë·ªÅu y√™u c·∫ßu x√°c th·ª±c
                        .anyRequest().authenticated()
                )
                .oauth2Login(oauth -> oauth
                        .authorizationEndpoint(authorization -> authorization
                                .authorizationRequestRepository(authorizationRequestRepository)
                        )
                        .userInfoEndpoint(userInfo -> userInfo
                                .userService(customOAuth2UserService)
                                .oidcUserService(customOidcUserService)
                        )
                        .successHandler(oAuth2AuthenticationSuccessHandler)
                        .failureHandler(oAuth2AuthenticationFailureHandler)
                )
                /**
                 üß† Gi·∫£i th√≠ch:
                 401 (Unauthorized): ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c th√†nh c√¥ng (v√≠ d·ª•: sai username/password).
                 403 (Forbidden): ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c nh∆∞ng thi·∫øu quy·ªÅn ƒë·ªÉ truy c·∫≠p endpoint.
                 M·∫∑c ƒë·ªãnh, n·∫øu kh√¥ng c√≥ authenticationEntryPoint, Spring s·∫Ω tr·∫£ 403 cho m·ªçi l·ªói security ‚Üí g√¢y nh·∫ßm l·∫´n khi test login.

                 ‚öôÔ∏è Ki·ªÉm tra l·∫°i flow Login:
                 Khi g·ªçi /api/v1/auth/login v·ªõi m·∫≠t kh·∫©u ƒë√∫ng ‚Üí tr·∫£ 200, sinh JWT.
                 Khi g·ªçi m·∫≠t kh·∫©u sai ‚Üí BadCredentialsException ‚Üí authenticationEntryPoint ‚Üí 401 Unauthorized.
                 Khi g·ªçi API y√™u c·∫ßu quy·ªÅn cao h∆°n (vd. /api/v1/admin/...) v·ªõi token user th∆∞·ªùng ‚Üí 403 Forbidden.

                 üëâ Sau khi b·∫°n th√™m ƒëo·∫°n exceptionHandling n√†y v√† build l·∫°i container (mvn clean package && docker compose up -d --build), h√£y test l·∫°i Postman:
                 Sai m·∫≠t kh·∫©u ‚Üí 401
                 ƒê√∫ng m·∫≠t kh·∫©u ‚Üí 200
                 Token kh√¥ng ƒë·ªß quy·ªÅn ‚Üí 403

                 */
                .exceptionHandling(ex -> ex
                        // Khi x√°c th·ª±c th·∫•t b·∫°i (v√≠ d·ª• sai m·∫≠t kh·∫©u) ‚Üí tr·∫£ v·ªÅ 401
                        .authenticationEntryPoint((req, res, e) -> {
                            res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                            res.setContentType("application/json");
                            res.getWriter().write("""
                    {"error":"unauthorized","message":"Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá"}
                """);
                        })
                        // Khi ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p nh∆∞ng kh√¥ng ƒë·ªß quy·ªÅn ‚Üí 403
                        .accessDeniedHandler((req, res, e) -> {
                            res.setStatus(HttpServletResponse.SC_FORBIDDEN);
                            res.setContentType("application/json");
                            res.getWriter().write("""
                    {"error":"forbidden","message":"B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y"}
                """);
                        })
                )
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class); // Ch√®n filter JWT tr∆∞·ªõc filter x√°c th·ª±c username/password

        return http.build(); // K·∫øt xu·∫•t chu·ªói filter ho√†n ch·ªânh
    }

    /**
     * PasswordEncoder s·ª≠ d·ª•ng BCrypt, m·ªôt thu·∫≠t to√°n ‚Äúsalted & adaptive‚Äù ph√π h·ª£p ƒë·ªÉ l∆∞u tr·ªØ m·∫≠t kh·∫©u an to√†n.
     * C√≥ th·ªÉ tinh ch·ªânh strength (work factor) n·∫øu c·∫ßn c√¢n b·∫±ng gi·ªØa b·∫£o m·∫≠t v√† hi·ªáu nƒÉng.
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(); // M·∫∑c ƒë·ªãnh work factor h·ª£p l√Ω cho ƒëa s·ªë tr∆∞·ªùng h·ª£p
    }

    /**
     * DaoAuthenticationProvider ch·ªãu tr√°ch nhi·ªám so kh·ªõp th√¥ng tin ƒëƒÉng nh·∫≠p d·ª±a tr√™n UserDetailsService
     * v√† PasswordEncoder. D√π h·ªá th·ªëng ch·ªß y·∫øu d√πng JWT, provider n√†y v·∫´n h·ªØu √≠ch cho c√°c lu·ªìng ƒëƒÉng nh·∫≠p
     * ban ƒë·∫ßu (issue token) ho·∫∑c test n·ªôi b·ªô.
     */
    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider(); // Kh·ªüi t·∫°o provider ti√™u chu·∫©n
        provider.setUserDetailsService(userDetailsService); // G√°n ngu·ªìn d·ªØ li·ªáu ng∆∞·ªùi d√πng
        provider.setPasswordEncoder(passwordEncoder()); // G√°n c∆° ch·∫ø m√£ h√≥a ƒë·ªÉ so kh·ªõp m·∫≠t kh·∫©u
        return provider; // Tr·∫£ v·ªÅ provider ƒë·ªÉ Spring Security s·ª≠ d·ª•ng
    }

    /**
     * AuthenticationManager l√† ƒëi·ªÉm v√†o trung t√¢m ƒë·ªÉ k√≠ch ho·∫°t x√°c th·ª±c (authenticate).
     * ·ªû Spring Security 6, ƒë·ªëi t∆∞·ª£ng n√†y ƒë∆∞·ª£c cung c·∫•p th√¥ng qua AuthenticationConfiguration.
     */
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager(); // L·∫•y AuthenticationManager do Spring t·ª± c·∫•u h√¨nh
    }

    /**
     * C·∫•u h√¨nh CORS d·ª±a tr√™n AppProps: b·∫≠t allowCredentials, gi·ªõi h·∫°n origin theo danh s√°ch c·∫•u h√¨nh,
     * cho ph√©p to√†n b·ªô header v√† c√°c ph∆∞∆°ng th·ª©c HTTP ph·ªï bi·∫øn. Filter n√†y ƒë∆∞·ª£c √°p d·ª•ng cho m·ªçi ƒë∆∞·ªùng d·∫´n.
     * L∆∞u √Ω: khi allowCredentials=true, Access-Control-Allow-Origin kh√¥ng ƒë∆∞·ª£c ph√©p l√† ‚Äú*‚Äù; do ƒë√≥ ta ƒë·ªçc
     * danh s√°ch origin t∆∞·ªùng minh t·ª´ c·∫•u h√¨nh.
     */
    @Bean
    public CorsFilter corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); // B·ªô √°nh x·∫° path -> CORS config
        CorsConfiguration config = new CorsConfiguration(); // ƒê·ªëi t∆∞·ª£ng c·∫•u h√¨nh CORS
        config.setAllowCredentials(true); // Cho ph√©p g·ª≠i cookie/authorization header qua CORS (ph·∫£i d√πng origin t∆∞·ªùng minh)
        config.setAllowedOrigins(List.of(appProps.getCorsAllowedOrigins().split(","))); // ƒê·ªçc danh s√°ch origin h·ª£p l·ªá t·ª´ c·∫•u h√¨nh
        config.setAllowedHeaders(List.of("*")); // Cho ph√©p m·ªçi header (c√≥ th·ªÉ si·∫øt ch·∫∑t sau)
        config.setAllowedMethods(Arrays.asList("GET","POST","PUT","DELETE","OPTIONS")); // Cho ph√©p c√°c method ph·ªï bi·∫øn
        source.registerCorsConfiguration("/**", config); // √Åp d·ª•ng cho to√†n b·ªô endpoint
        return new CorsFilter(source); // Tr·∫£ v·ªÅ filter ƒë·ªÉ Spring ƒë∆∞a v√†o chain
    }

    @Bean
    public HttpCookieOAuth2AuthorizationRequestRepository authorizationRequestRepository() {
        return new HttpCookieOAuth2AuthorizationRequestRepository();
    }
}
